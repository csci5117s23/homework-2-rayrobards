import {useEffect, useState} from "react";
import TodoItem from "@/components/todoItem";
import PageHeader from "@/components/header";
import Head from 'next/head'
import { getTodoItems, addTodoItem, getTodoItemsCategory } from "@/modules/Data";
import { useAuth } from "@clerk/nextjs";
import { useRouter } from "next/router";
import { Caesar_Dressing } from "next/font/google";

export default function TodoCategoryPage() {
    const router = useRouter();
    const [todoList, setTodoList] = useState([]);
    const [newItem, setNewItem] = useState("");
    const [loading, setLoading] = useState(true);
    const { isLoaded, userId, sessionId, getToken } = useAuth();
    const [category, setCategory] = useState("");
    useEffect(() => {
        if(isLoaded) {
            if (!userId) {
                router.push("/");
            }
        }
    }, [isLoaded])

    useEffect(()=>{
        if(router.isReady) {
            setCategory(router.query.category);
            async function loadData() {
                    const token = await getToken({template: "codehooks"});
                    let data = await getTodoItemsCategory(token, userId, category);
                    setTodoList(data)
                    setLoading(false);
            }
            loadData();
        }
    }, [todoList, isLoaded, router.isReady]);
    //TODO; if i mount this, wont reset state when components state changes, bad practice?

    async function addItem()
    {
        const todoItem = {
            "userId": userId, 
            "text": newItem, 
            "category": category
        }
        const updatedTodoList = [todoItem, ...todoList];
        setTodoList(updatedTodoList);
        setNewItem("");
        const token = await getToken({template: "codehooks"});
        await addTodoItem(token, todoItem);
    }

   if(loading)
   {
        return (
            <span>loading....</span>
        )
   }

    return (
        <>
            <Head>
                <title>Todos</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className='todoPageContainer'>
                <div>
                    <PageHeader pageTitle={`TODOS: ${category}`} />
                </div>
                <div className="todoItems">
                    <div>
                        {todoList.map(todos => (
                            <TodoItem key={todos.id} item={todos}></TodoItem>
                        ))}
                    </div>
                </div>
                <div className="addTodoItem">
                    <textarea className="textBox" placeholder="Enter new todo item description here." onChange={(e) => setNewItem(e.target.value)}/>
                    <button className="addItemButton" onClick={addItem}>{`Add new Todo Item to ${category}`}</button>
                </div>
            </div>
        </>
    )
}

